;   Copyright (c) Rich Hickey, Reid Draper, and contributors.
;   All rights reserved.
;   The use and distribution terms for this software are covered by the
;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
;   which can be found in the file epl-v10.html at the root of this distribution.
;   By using this software in any fashion, you are agreeing to be bound by
;   the terms of this license.
;   You must not remove this notice, or any other, from this software.

(ns ^{:author "Gary Fredericks"
      :doc "Purely functional and splittable pseudo-random number generators."}
 clojure.test.check.random
  (:refer-clojure :exclude [unsigned-bit-shift-right]))

(defprotocol IRandom
  (rand-long [rng]
    "Returns a random long based on the given immutable RNG.

  Note: to maintain independence you should not call more than one
  function in the IRandom protocol with the same argument")
  (rand-double [rng]
    "Returns a random double between 0.0 (inclusive) and 1.0 (exclusive)
  based on the given immutable RNG.

  Note: to maintain independence you should not call more than one
  function in the IRandom protocol with the same argument")
  (split [rng]
    "Returns two new RNGs [rng1 rng2], which should generate
  sufficiently independent random data.

  Note: to maintain independence you should not call more than one
  function in the IRandom protocol with the same argument")
  (split-n [rng n]
    "Returns a collection of `n` RNGs, which should generate
  sufficiently independent random data.

  Note: to maintain independence you should not call more than one
  function in the IRandom protocol with the same argument"))

;;
;; This is a port of the clojure-jvm port of
;; java.util.SplittableRandom, and should give identical results.
;;

(def ^:private SIGN (apply * (repeat 63 2)))
(def ^:private MASK (dec (apply * (repeat 64 2))))

(def ^:private MAX_VALUE (dec (apply * (repeat 63 2))))
(def ^:private MIN_VALUE (dec (- MAX_VALUE)))

(defmacro ^:private unsigned-bit-shift-right
  [x n]
  {:pre [(<= 1 n 63)]}
  (let [mask (-> MIN_VALUE
                 (bit-shift-right (dec n))
                 (bit-not))]
    `(-> ~x
         (bit-shift-right ~n)
         (bit-and ~mask))))

(defn ^:private check-sign [x num]
  (if (zero? (bit-and SIGN x))
    (-> x (bit-and MAX_VALUE))
    (-> x (bit-or MIN_VALUE))))

(defn ^:private longify*
  "Macro for writing arbitrary longs in the java 0x syntax. E.g.
  0x9e3779b97f4a7c15 (which is read as a bigint because it's out
  of range) becomes -7046029254386353131."
  [num]
  (if (<= MIN_VALUE num MAX_VALUE)
    num
    (-> num (bit-and MASK) (check-sign num))))

(defmacro ^:private longify
  "Macro for writing arbitrary longs in the java 0x syntax. E.g.
  0x9e3779b97f4a7c15 (which is read as a bigint because it's out
  of range) becomes -7046029254386353131."
  [num]
  (longify* num))

(defmacro ^:private bxoubsr
  "Performs (-> x (bit-shift-right n) (bit-xor x))."
  [x n]
  `(let [x# ~x]
     (-> x# (unsigned-bit-shift-right ~n) (bit-xor x#) longify*)))

(defmacro ^:private mix-64
  [n]
  `(-> ~n
       (bxoubsr 30)
       (* (longify 0xbf58476d1ce4e5b9))
       longify*
       (bxoubsr 27)
       (* (longify 0x94d049bb133111eb))
       longify*
       (bxoubsr 31)
       longify*))

(defn* bit-count
  ([0] 0)
  ([x]
   (let [x (- x (-> x (bit-shift-right 1) (bit-and 0x5555555555555555)))
         x (-> x (bit-and 0x3333333333333333)
               (+ (-> x (bit-shift-right 2) (bit-and 0x3333333333333333))))
         x (-> x (bit-shift-right 4) (+ x) (bit-and 0x0f0f0f0f0f0f0f0f))
         x (-> x (bit-shift-right 8) (+ x))
         x (-> x (bit-shift-right 16) (+ x))
         x (-> x (bit-shift-right 32) (+ x))]
     (bit-and x 0x7F))))

(defmacro ^:private mix-gamma
  [n]
  `(-> ~n
       (bxoubsr 33)
       (* (longify 0xff51afd7ed558ccd))
       longify*
       (bxoubsr 33)
       (* (longify 0xc4ceb9fe1a85ec53))
       longify*
       (bxoubsr 33)
       (bit-or 1)
       (as-> z#
             (cond-> z#
               (> 24 (-> z#
                         (bxoubsr 1)
                         (bit-count)))
               (bit-xor (longify 0xaaaaaaaaaaaaaaaa))))
       longify*))

;; This results in the same value as in the JVM
(def ^:private ^:const double-unit (/ 1.0 (float (bit-set 0 53))))

(deftype SplittableRandom [gamma state]
  IRandom
  (rand-long [_]
    (-> state (+ gamma) longify* (mix-64)))
  (rand-double [this]
    (* double-unit (unsigned-bit-shift-right (int (rand-long this)) 11)))
  (split [this]
    (let [state' (longify* (+ gamma state))
          state'' (longify* (+ gamma state'))
          gamma' (mix-gamma state'')]
      [(SplittableRandom. gamma state'')
       (SplittableRandom. gamma' (mix-64 state'))]))
  (split-n [this n]
    (let [n (int n)]
      (case n
        0 []
        1 [this]
        (let [n-dec (dec n)]
          (loop [state state
                 ret []]
            (if (= n-dec (count ret))
              (-> ret
                  (conj (SplittableRandom. gamma state)))
              (let [state' (longify* (+ gamma state))
                    state'' (longify* (+ gamma state'))
                    gamma' (mix-gamma state'')
                    new-rng (SplittableRandom. gamma' (mix-64 state'))]
                (recur state'' (conj ret new-rng)))))))))
  clojerl.IStringable
  (str [_] "#<SplittableRandom>"))

(def ^:private golden-gamma
  (longify 0x9e3779b97f4a7c15))

(defn make-java-util-splittable-random
  ([]
   (make-java-util-splittable-random (erlang/monotonic_time :milli_seconds)))
  ([seed]
   (SplittableRandom. golden-gamma seed)))


;; some global state to make sure that seedless calls to make-random
;; return independent results
(defn- next-rng
  "Returns a random-number generator. Successive calls should return
  independent results."
  []
  (when-not (erlang/get ::rng)
    (erlang/put ::rng (make-java-util-splittable-random)))
  (let [rng (erlang/get ::rng)
        [rng1 rng2] (split rng)]
    (erlang/put ::rng rng2)
    rng1))

(defn make-random
  "Given an optional Long seed, returns an object that satisfies the
  IRandom protocol."
  ([] (next-rng))
  ([seed] (make-java-util-splittable-random seed)))
